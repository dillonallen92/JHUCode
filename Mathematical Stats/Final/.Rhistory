# problem 1
ants <- rbind(r(0,1,2,3,4,5), r(10, 29,25, 27,6,3))
# problem 1
ants <- rbind(c(0,1,2,3,4,5), c(10, 29,25, 27,6,3))
View(ants)
View(ants)
# problem 1
ants <- rbind(c(0,1,2,3,4,5), c(10, 29,25, 27,6,3))
lambda = (0*10 + 1*29 + 25*2 + 27*3 + 6*4 + 3*5)/100
# Probabilities
pa = 0.5
pb = 0.3
pc = 0.2
# p that a won 2, b won 5, c won 3
pA <- choose(2,10)
choose(10,2)
choose(2,10)
pA <- choose(n,na)*((pa)^na)*(1-pa)^(n-na)
# Probabilities
pa = 0.5
pb = 0.3
pc = 0.2
# p that a won 2, b won 5, c won 3
na = 2
nb = 5
nc = 3
n = 10
pA <- choose(n,na)*((pa)^na)*(1-pa)^(n-na)
pB <- choose(n,nb)*((pb)^nb)*((1-pb)^(n-nb))
# Probabilities
pa = 0.5
pb = 0.3
pc = 0.2
# p that a won 2, b won 5, c won 3
na = 2
nb = 5
nc = 3
n = 10
pA <- choose(n,na)*((pa)^na)*(1-pa)^(n-na)
pB <- choose(n,nb)*((pb)^nb)*((1-pb)^(n-nb))
pC <- choose(n,nc)*((pc)^nc)*((1-pc)^(n-nc))
p <- pA + pB + pC
# two sample mean hypothesis test
C <- c(4.62, 5.95, 4.81, 5.26, 5.41, 5.64, 4.84, 3.96, 6.38, 5.24, 5.07, 3.63)
CM <- c(3.86, 10.95, 5.85, 4.61, 7.90, 6.31, 7.07, 5.72, 4.60, 6.66, 5.73, 6.97, 4.26, 3.62, 4.71)
# alpha = 0.05 level
# H0 = muCM = muC
# HA = muCM > muC
n = length(CM)
m = length(C)
x = mean(CM)
y = mean(C)
varx <- var(CM)
vary <- var(C)
sp = sqrt(((n-1)*varx + (m-1)*vary)/(n+m-2))
# two sample mean hypothesis test
C <- c(4.62, 5.95, 4.81, 5.26, 5.41, 5.64, 4.84, 3.96, 6.38, 5.24, 5.07, 3.63)
CM <- c(3.86, 10.95, 5.85, 4.61, 7.90, 6.31, 7.07, 5.72, 4.60, 6.66, 5.73, 6.97, 4.26, 3.62, 4.71)
# alpha = 0.05 level
# H0 = muCM = muC
# HA = muCM > muC
n = length(CM)
m = length(C)
x = mean(CM)
y = mean(C)
varx <- var(CM)
vary <- var(C)
sp = sqrt(((n-1)*varx + (m-1)*vary)/(n+m-2))
df = n + m - 2
t = (x-y)/(sp*(sqrt((1/n) + (1/m))))
# golf game, find sigma^2 with a confidence interval for it
scores <- c(80, 88, 89, 90, 83, 84, 79, 82, 87, 76, 81, 86, 77, 78, 85)
# golf game, find sigma^2 with a confidence interval for it
scores <- c(80, 88, 89, 90, 83, 84, 79, 82, 87, 76, 81, 86, 77, 78, 85)
chisq.test(scores)
var_scores = var(scores)
# golf game, find sigma^2 with a confidence interval for it
scores <- c(80, 88, 89, 90, 83, 84, 79, 82, 87, 76, 81, 86, 77, 78, 85)
chisq_lb <- 26.119
chisq_ub <- 5.629
var_scores <- var(scores)
n = length(scores)
lb = (n-1)*var_scores/chisq_lb
ub = (n-1)*var_scores/chisq_ub
# traffic circle debate
n = 182
accidents_before = 32 # acc_B
accidents_after = 20 # acc_A
# alpha = 0.05
# H0 pB = pA
# HA pB > pA
pB = accidents_before / n
pA = accidents_after / n
# traffic circle debate
n = 182
accidents_before = 32 # acc_B
accidents_after = 20 # acc_A
# alpha = 0.05
# H0 pB = pA
# HA pB > pA
pB = accidents_before / n
pA = accidents_after / n
pE = (accidents_before + accidents_after)/(n + n)
# need to get a z > 1.96 for alpha = 0.05
z_num = pB - pA
z_denom = sqrt((pE*(1-pE))/n + (pE*(1-pE))/n)
z = z_num / z_denom
table(ants)
# problem 1
ants <- rbind(c(0,1,2,3,4,5), c(10, 29,25, 27,6,3))
table(ants)
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for Poisson is Lambda = mean(ants)
prob_table = dpois(0:5, lambda = mean(ants))
prob_greaterthan5 = 1 - sum(prob_table)
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for Poisson is Lambda = mean(ants)
prob_table = dpois(0:5, lambda = mean(ants))
prob_greaterthan5 = 1 - sum(prob_table)
chisq.test(x = c(10,29,25,27,6,3), p=c(prob_table, prob_greaterthan5))
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for Poisson is Lambda = mean(ants)
prob_table = dpois(0:5, lambda = mean(ants))
prob_greaterthan5 = 1 - sum(prob_table)
chisq.test(x = c(10,29,25,27,6,3, 0), p=c(prob_table, prob_greaterthan5))
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for Poisson is Lambda = mean(ants)
prob_table = dpois(0:5, lambda = mean(ants))
prob_greaterthan5 = 1 - sum(prob_table)
chisq.test(x = c(10,29,25,27,6,3, 0), p=c(prob_table, prob_greaterthan5), simulate.p.value = TRUE)
# MLE for poisson is mean
lambda = mean(ants)
(0*10 + 1*29 + 2*25 + 3*27 + 4*6 + 5*3)/100
# estimated values
p0_est = exp(-lambda)*lambda^0/factorial(0)
10+29+25+27+6+3
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = []
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
est_arr[7] = 1 - sum(est_arr)
est_arr
est_arr[7] = 1 - sum(est_arr/n)
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
sumprobs = 0
for( k in 0:5){
sumprobs = sumprobs + exp(-lambda)*lambda^k / factorial(k)
}
est_arr[7] = n*(1-sumprobs)
est_arr
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
sumprobs = 0
for( k in 0:5){
sumprobs = sumprobs + exp(-lambda)*lambda^k / factorial(k)
}
est_arr[7] = n*(1-sumprobs)
obs = c(10,29,25,27,6,3,0)
d = 0
for(jj in 1:7){
jj
}
for(jj in 1:7){
d = d + ((obs[jj] - est_arr[jj])/obs[jj])
}
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
sumprobs = 0
for( k in 0:5){
sumprobs = sumprobs + exp(-lambda)*lambda^k / factorial(k)
}
est_arr[7] = n*(1-sumprobs)
obs = c(10,29,25,27,6,3,0)
d = 0
for(jj in 1:7){
d = d + ((obs[jj] - est_arr[jj])/obs[jj])
}
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
sumprobs = 0
for( k in 0:5){
sumprobs = sumprobs + exp(-lambda)*lambda^k / factorial(k)
}
est_arr[7] = n*(1-sumprobs)
obs = c(10,29,25,27,6,3,0)
d = 0
for(jj in 1:7){
d = d + ((obs[jj] - est_arr[jj])/obs[jj])
}
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
sumprobs = 0
for( k in 0:5){
sumprobs = sumprobs + exp(-lambda)*lambda^k / factorial(k)
}
est_arr[7] = n*(1-sumprobs)
obs = c(10,29,25,27,6,3,0)
d = 0
for(j in 1:7){
d = d + ((obs[j] - est_arr[j])/obs[j])
}
obs[1]
obs[1] - est_arr[1]
(obs[1] - est_arr[1])/(obs[1])
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
sumprobs = 0
for( k in 0:5){
sumprobs = sumprobs + exp(-lambda)*lambda^k / factorial(k)
}
est_arr[7] = n*(1-sumprobs)
obs = c(10,29,25,27,6,3)
est_arr_redone = c(est_arr[1], est_arr[2], est_arr[3], est_arr[4], est_arr[5], est_arr[6] + est_arr[7])
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
sumprobs = 0
for( k in 0:5){
sumprobs = sumprobs + exp(-lambda)*lambda^k / factorial(k)
}
est_arr[7] = n*(1-sumprobs)
obs = c(10,29,25,27,6,3)
est_arr_redone = c(est_arr[1], est_arr[2], est_arr[3], est_arr[4], est_arr[5], est_arr[6] + est_arr[7])
d = 0
for(i in 1:6){
d = d + (obs[i] - est_arr_redone[i])/obs[i]
}
# problem 1
ants <- rep(0:5, times=c(10,29,25,27,6,3))
table(ants)
# MLE for poisson is mean
lambda = mean(ants)
n = 100
# estimated values
est_arr = c()
for (i in 0:5){
est_arr[i+1] = n*exp(-lambda)*lambda^(i)/factorial(i)
}
sumprobs = 0
for( k in 0:5){
sumprobs = sumprobs + exp(-lambda)*lambda^k / factorial(k)
}
est_arr[7] = n*(1-sumprobs)
obs = c(10,29,25,27,6,3)
est_arr_redone = c(est_arr[1], est_arr[2], est_arr[3], est_arr[4], est_arr[5], est_arr[6] + est_arr[7])
d = 0
for(i in 1:6){
d = d + (obs[i] - est_arr_redone[i])^2/obs[i]
}
# Quality Control Stuff
A <- c(31, 45, 52, 30)
B <- c(62, 35, 30, 40)
C <- c(20, 20, 25, 23)
t.test(x=A, y=B, paired = TRUE)
t.test(x=A, y=C, paired = TRUE)
t.test(x=B, y=C, paired = TRUE)
# viscosity problems
v_b <- c(20.65, 18.50, 20.08, 20.87, 19.46, 19.79, 20.01, 19.17, 20.26, 20.44, 19.38, 20.78)
v_c <- c(20.16, 18.92, 20.11, 20.32, 20.34, 19.85, 20.07, 20.14, 20.05, 20.09)
# viscosity problems
v_b <- c(20.65, 18.50, 20.08, 20.87, 19.46, 19.79, 20.01, 19.17, 20.26, 20.44, 19.38, 20.78)
v_c <- c(20.16, 18.92, 20.11, 20.32, 20.34, 19.85, 20.07, 20.14, 20.05, 20.09)
sum_b = sum(v_b)
sum_c = sum(v_c)
sum_b2 = 0
sum_c2 = 0
for(i in 1:length(v_b)){
sum_b2 = sum_b2 + v_b[i]^2
}
for(i in 1:length(v_c)){
sum_c2 = sum_c2 + v_c[i]^2
}
# viscosity problems
v_b <- c(20.65, 18.50, 20.08, 20.87, 19.46, 19.79, 20.01, 19.17, 20.26, 20.44, 19.38, 20.78)
v_c <- c(20.16, 18.92, 20.11, 20.32, 20.34, 19.85, 20.07, 20.14, 20.05, 20.09)
sum_b = sum(v_b)
sum_c = sum(v_c)
sum_b2 = 0
sum_c2 = 0
n = length(v_b)
m = length(v_c)
for(i in 1:n){
sum_b2 = sum_b2 + v_b[i]^2
}
for(i in 1:m){
sum_c2 = sum_c2 + v_c[i]^2
}
# viscosity problems
v_b <- c(20.65, 18.50, 20.08, 20.87, 19.46, 19.79, 20.01, 19.17, 20.26, 20.44, 19.38, 20.78)
v_c <- c(20.16, 18.92, 20.11, 20.32, 20.34, 19.85, 20.07, 20.14, 20.05, 20.09)
sum_b = sum(v_b)
sum_c = sum(v_c)
sum_b2 = 0
sum_c2 = 0
n = length(v_b)
m = length(v_c)
for(i in 1:n){
sum_b2 = sum_b2 + v_b[i]^2
}
for(i in 1:m){
sum_c2 = sum_c2 + v_c[i]^2
}
sb2 = ((n*sum_b2) - sum_b^2)/(n*(n-1))
sc2 = ((m*sum_c2) - sum_c^2)/(m*(m-1))
f = sc2/sb2
1 - .75^3
