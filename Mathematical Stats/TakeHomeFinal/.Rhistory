sumx2 = sumx2 + x[i]*x[i]
sumy2 = sumy2 + y[i]*y[i]
sumxx2 = sumxx2 + (x[i] - mean(x))^2
}
b1 = (n*sumxy - (sumx)*(sumy))/(n*sumx2 - (sumx^2))
b0 = mean(y) - b1*mean(x)
# (b) Conduct t-test at alpha = 0.05 for slope being equal to 0
# H0: b1 = 0
# Ha: b1 != 0
b1prime = 0
s2 = (1/(n-2))*(sumy2 - b0*sumy - b1*sumxy)
s = sqrt(s2)
t = (b1 - b1prime)/(s/sqrt(sumxx2))
# t_(alpha/2,8) = +/- 2.3060
t_alpha = 2.3060
# since t > t_(alpha/2,8), we can reject the null hypothesis that the slope was 0
# (c) develop a 95% confidence interval for the intercept
width = t_alpha*((s * sqrt(sumx2))/(sqrt(n)*sqrt(sumxx2)))
x <- c(1.00, 6.00,  9.00, 12.00, 14.00, 15.0, 17.00, 18.00, 19.00, 20.00)
y <- c(3.06, 7.23, 19.34, 29.29, 30.76, 36.5, 39.24, 40.54, 52.19, 46.98)
# (a) Fit to a simple linear model
# Use theorem 11.3.1 for b0 (intercept) and b1 (slope)
n = length(x)
sumxy = 0
sumx = sum(x)
sumy = sum(y)
sumx2 = 0
sumy2 = 0
sumxx2 = 0
for(i in 1:n){
sumxy = sumxy + x[i]*y[i]
sumx2 = sumx2 + x[i]*x[i]
sumy2 = sumy2 + y[i]*y[i]
sumxx2 = sumxx2 + (x[i] - mean(x))^2
}
b1 = (n*sumxy - (sumx)*(sumy))/(n*sumx2 - (sumx^2))
b0 = mean(y) - b1*mean(x)
# (b) Conduct t-test at alpha = 0.05 for slope being equal to 0
# H0: b1 = 0
# Ha: b1 != 0
b1prime = 0
s2 = (1/(n-2))*(sumy2 - b0*sumy - b1*sumxy)
s = sqrt(s2)
t = (b1 - b1prime)/(s/sqrt(sumxx2))
# t_(alpha/2,8) = +/- 2.3060
t_alpha = 2.3060
# since t > t_(alpha/2,8), we can reject the null hypothesis that the slope was 0
# (c) develop a 95% confidence interval for the intercept
width = t_alpha*((s * sqrt(sumx2))/(sqrt(n)*sqrt(sumxx2)))
lb = b0 - width
ub = b0 + width
x <- c(1.00, 6.00,  9.00, 12.00, 14.00, 15.0, 17.00, 18.00, 19.00, 20.00)
y <- c(3.06, 7.23, 19.34, 29.29, 30.76, 36.5, 39.24, 40.54, 52.19, 46.98)
# (a) Fit to a simple linear model
# Use theorem 11.3.1 for b0 (intercept) and b1 (slope)
n = length(x)
sumxy = 0
sumx = sum(x)
sumy = sum(y)
sumx2 = 0
sumy2 = 0
sumxx2 = 0
for(i in 1:n){
sumxy = sumxy + x[i]*y[i]
sumx2 = sumx2 + x[i]*x[i]
sumy2 = sumy2 + y[i]*y[i]
sumxx2 = sumxx2 + (x[i] - mean(x))^2
}
b1 = (n*sumxy - (sumx)*(sumy))/(n*sumx2 - (sumx^2))
b0 = mean(y) - b1*mean(x)
# (b) Conduct t-test at alpha = 0.05 for slope being equal to 0
# H0: b1 = 0
# Ha: b1 != 0
b1prime = 0
s2 = (1/(n-2))*(sumy2 - b0*sumy - b1*sumxy)
s = sqrt(s2)
t = (b1 - b1prime)/(s/sqrt(sumxx2))
# t_(alpha/2,8) = +/- 2.3060
t_alpha = 2.3060
# since t > t_(alpha/2,8), we can reject the null hypothesis that the slope was 0
# (c) develop a 95% confidence interval for the intercept
width = t_alpha*((s * sqrt(sumx2))/(sqrt(n)*sqrt(sumxx2)))
lb = b0 - width
ub = b0 + width
# (d) develop a confidence interval for the regression line when x = 5
x_val = 5
y_hat = b0 + b1*x_val
width = t_alpha * s * sqrt((1/n) + (x_val - mean(x))/sumxx2)
lb = y_hat - width
ub = y_hat + width
x <- c(1.00, 6.00,  9.00, 12.00, 14.00, 15.0, 17.00, 18.00, 19.00, 20.00)
y <- c(3.06, 7.23, 19.34, 29.29, 30.76, 36.5, 39.24, 40.54, 52.19, 46.98)
# (a) Fit to a simple linear model
# Use theorem 11.3.1 for b0 (intercept) and b1 (slope)
n = length(x)
sumxy = 0
sumx = sum(x)
sumy = sum(y)
sumx2 = 0
sumy2 = 0
sumxx2 = 0
for(i in 1:n){
sumxy = sumxy + x[i]*y[i]
sumx2 = sumx2 + x[i]*x[i]
sumy2 = sumy2 + y[i]*y[i]
sumxx2 = sumxx2 + (x[i] - mean(x))^2
}
b1 = (n*sumxy - (sumx)*(sumy))/(n*sumx2 - (sumx^2))
b0 = mean(y) - b1*mean(x)
# (b) Conduct t-test at alpha = 0.05 for slope being equal to 0
# H0: b1 = 0
# Ha: b1 != 0
b1prime = 0
s2 = (1/(n-2))*(sumy2 - b0*sumy - b1*sumxy)
s = sqrt(s2)
t = (b1 - b1prime)/(s/sqrt(sumxx2))
# t_(alpha/2,8) = +/- 2.3060
t_alpha = 2.3060
# since t > t_(alpha/2,8), we can reject the null hypothesis that the slope was 0
# (c) develop a 95% confidence interval for the intercept
width = t_alpha*((s * sqrt(sumx2))/(sqrt(n)*sqrt(sumxx2)))
lb = b0 - width
ub = b0 + width
# (d) develop a confidence interval for the regression line when x = 5
x_val = 5
y_hat = b0 + b1*x_val
width_rl = t_alpha * s * sqrt((1/n) + (x_val - mean(x))/sumxx2)
lb_rl = y_hat - width_rl
ub_rl = y_hat + width_rl
x <- c(1.00, 6.00,  9.00, 12.00, 14.00, 15.0, 17.00, 18.00, 19.00, 20.00)
y <- c(3.06, 7.23, 19.34, 29.29, 30.76, 36.5, 39.24, 40.54, 52.19, 46.98)
# (a) Fit to a simple linear model
# Use theorem 11.3.1 for b0 (intercept) and b1 (slope)
n = length(x)
sumxy = 0
sumx = sum(x)
sumy = sum(y)
sumx2 = 0
sumy2 = 0
sumxx2 = 0
for(i in 1:n){
sumxy = sumxy + x[i]*y[i]
sumx2 = sumx2 + x[i]*x[i]
sumy2 = sumy2 + y[i]*y[i]
sumxx2 = sumxx2 + (x[i] - mean(x))^2
}
b1 = (n*sumxy - (sumx)*(sumy))/(n*sumx2 - (sumx^2))
b0 = mean(y) - b1*mean(x)
# (b) Conduct t-test at alpha = 0.05 for slope being equal to 0
# H0: b1 = 0
# Ha: b1 != 0
b1prime = 0
s2 = (1/(n-2))*(sumy2 - b0*sumy - b1*sumxy)
s = sqrt(s2)
t = (b1 - b1prime)/(s/sqrt(sumxx2))
# t_(alpha/2,8) = +/- 2.3060
t_alpha = 2.3060
# since t > t_(alpha/2,8), we can reject the null hypothesis that the slope was 0
# (c) develop a 95% confidence interval for the intercept
width = t_alpha*((s * sqrt(sumx2))/(sqrt(n)*sqrt(sumxx2)))
lb = b0 - width
ub = b0 + width
# (d) develop a confidence interval for the regression line when x = 5
x_val = 5
y_hat = b0 + b1*x_val
width_rl = t_alpha * s * sqrt((1/n) + (x_val - mean(x))/sumxx2)
lb_rl = y_hat - width_rl
ub_rl = y_hat + width_rl
# (e)
width_newval = t_alpha * s * sqrt(1 + (1/n) + (x_val - mean(x))/sumxx2)
lb_newval = y_hat - width_newval
ub_newval = y_hat + width_newval
varx = 4
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
d = 5 # diameter of circle
# equation of circle, x^2 + y^2 = r^2, find the upper and lower coordinates
cu = sqrt((d/2)^2 - 1)
cl = - sqrt((d/2)^2 - 1)
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
d = 5 # diameter of circle
# equation of circle, x^2 + y^2 = r^2, find the upper and lower coordinates
cu = sqrt((d/2)^2 - 1)
cl = - sqrt((d/2)^2 - 1)
expy_givenx = muy + (rho*sqrt(vary))*(1 - mux)/sqrt(varx)
vary_givenx = (1-rho^2)*vary
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
d = 5 # diameter of circle
# equation of circle, x^2 + y^2 = r^2, find the upper and lower coordinates
cu = sqrt((d/2)^2 - 1)
cl = - sqrt((d/2)^2 - 1)
expy_givenx = muy + (rho*sqrt(vary))*(1 - mux)/sqrt(varx)
vary_givenx = (1-rho^2)*vary
# now find the z values
zl = (cl - expy_givenx)/sqrt(vary_givenx)
zu = (cl + expy_givenx)/sqrt(vary_givenx)
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
d = 5 # diameter of circle
# equation of circle, x^2 + y^2 = r^2, find the upper and lower coordinates
cu = sqrt((d/2)^2 - 1)
cl = - sqrt((d/2)^2 - 1)
expy_givenx = muy + (rho*sqrt(vary))*(1 - mux)/sqrt(varx)
vary_givenx = (1-rho^2)*vary
# now find the z values
zl = (cl - expy_givenx)/sqrt(vary_givenx)
zu = (cl + expy_givenx)/sqrt(vary_givenx)
# P(cl < x < cu) = P(zu) - P(zl)
p = .3121 - .0170
114+48
# Finding the MLE for some distribution
vals1 <- runif(10, min=0.5, max=1)
vals2 <- runif(100, min=0.5, max=1)
vals3 <- runif(1000, min = 0.5, max = 1)
vals4 <- runif(10000, min = 0.5, max = 1)
# Finding the MLE for some distribution
n = 10
sum1 = 0
sum2 = 0
sum3 = 0
sum4 = 0
for (i in 1:n){
vals1 <- runif(10, min=0.5, max=1)
vals2 <- runif(100, min=0.5, max=1)
vals3 <- runif(1000, min = 0.5, max = 1)
vals4 <- runif(10000, min = 0.5, max = 1)
min1 <- min(vals1)
min2 <- min(vals2)
min3 <- min(vals3)
min4 <- min(vals4)
sum1 = sum1 + min1
sum2 = sum2 + min2
sum3 = sum3 + min3
sum4 = sum4 + min4
}
avg1 = sum1/n
avg2 = sum2/n
avg3 = sum3/n
avg4 = sum4/n
# Finding the MLE for some distribution
n = 10
sum1 = 0
sum2 = 0
sum3 = 0
sum4 = 0
for (i in 1:n){
vals1 <- runif(10, min=0.5, max=1) * (2/3)
vals2 <- runif(100, min=0.5, max=1) *(2/3)
vals3 <- runif(1000, min = 0.5, max = 1) *(2/3)
vals4 <- runif(10000, min = 0.5, max = 1) *(2/3)
min1 <- min(vals1)
min2 <- min(vals2)
min3 <- min(vals3)
min4 <- min(vals4)
sum1 = sum1 + min1
sum2 = sum2 + min2
sum3 = sum3 + min3
sum4 = sum4 + min4
}
avg1 = sum1/n
avg2 = sum2/n
avg3 = sum3/n
avg4 = sum4/n
vals4 <- runif(10000, min = 0, max = 1) * (2/3)
# Finding the MLE for some distribution
n = 10
sum1 = 0
sum2 = 0
sum3 = 0
sum4 = 0
for (i in 1:n){
vals1 <- runif(10, min=0, max=1) * (2/3)
vals2 <- runif(100, min=0, max=1) * (2/3)
vals3 <- runif(1000, min = 0, max = 1) * (2/3)
vals4 <- runif(10000, min = 0, max = 1) * (2/3)
min1 <- min(vals1)
min2 <- min(vals2)
min3 <- min(vals3)
min4 <- min(vals4)
sum1 = sum1 + min1
sum2 = sum2 + min2
sum3 = sum3 + min3
sum4 = sum4 + min4
}
avg1 = sum1/n
avg2 = sum2/n
avg3 = sum3/n
avg4 = sum4/n
5*14
150/12
70+70+50
190/30
# Baseball stuff
games_played = 114
games_in_season = 162
aj_hr = 48
rm_hr = 61
p_aj_hr = aj_hr/games_played
48/114
48*.421
114+48
(48-.421*48)/(sqrt(48*(.421)*(1-.421)))
(14-.421*14)/(sqrt(14*(.421)*(1-.421)))
(14-.421*48)/(sqrt(48*(.421)*(1-.421)))
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
d = 5 # diameter of circle
# equation of circle, x^2 + y^2 = r^2, find the upper and lower coordinates
cu = sqrt((d/2)^2 - 1)
cl = - sqrt((d/2)^2 - 1)
expy_givenx = muy + (rho*sqrt(vary))*(1 - mux)/sqrt(varx)
vary_givenx = (1-rho^2)*vary
# now find the z values
zl = (cl - expy_givenx)/sqrt(vary_givenx)
zu = (cl + expy_givenx)/sqrt(vary_givenx)
# P(cl < x < cu) = P(zu) - P(zl)
p = .3121 - .0170
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
d = 5 # diameter of circle
# equation of circle, x^2 + y^2 = r^2, find the upper and lower coordinates
cu = sqrt((d/2)^2 - 1)
cl = - sqrt((d/2)^2 - 1)
expy_givenx = muy + (rho*sqrt(vary))*(1 - mux)/sqrt(varx)
vary_givenx = (1-rho^2)*vary
# now find the z values
zl = (cl - expy_givenx)/sqrt(vary_givenx)
zu = (cu + expy_givenx)/sqrt(vary_givenx)
# P(cl < x < cu) = P(zu) - P(zl)
p = .3121 - .0170
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
d = 5 # diameter of circle
# equation of circle, x^2 + y^2 = r^2, find the upper and lower coordinates
cu = sqrt((d/2)^2 - 1)
cl = - sqrt((d/2)^2 - 1)
expy_givenx = muy + (rho*sqrt(vary))*(1 - mux)/sqrt(varx)
vary_givenx = (1-rho^2)*vary
# now find the z values
zl = (cl - expy_givenx)/sqrt(vary_givenx)
zu = (cl + expy_givenx)/sqrt(vary_givenx)
# P(cl < x < cu) = P(zu) - P(zl)
p = .3121 - .0170
# Marksman shots
mux = 0.5
muy = 1
varx = 4
vary = 6
rho = 0.7
x = 1
d = 5 # diameter of circle
# equation of circle, x^2 + y^2 = r^2, find the upper and lower coordinates
cu = sqrt((d/2)^2 - 1)
cl = - sqrt((d/2)^2 - 1)
expy_givenx = muy + (rho*sqrt(vary))*(1 - mux)/sqrt(varx)
vary_givenx = (1-rho^2)*vary
# now find the z values
zl = (cl - expy_givenx)/sqrt(vary_givenx)
zu = (cu - expy_givenx)/sqrt(vary_givenx)
# P(cl < x < cu) = P(zu) - P(zl)
p = .3121 - .0170
.6879 - 0.0170
x <- c(1.00, 6.00,  9.00, 12.00, 14.00, 15.0, 17.00, 18.00, 19.00, 20.00)
y <- c(3.06, 7.23, 19.34, 29.29, 30.76, 36.5, 39.24, 40.54, 52.19, 46.98)
# (a) Fit to a simple linear model
# Use theorem 11.3.1 for b0 (intercept) and b1 (slope)
n = length(x)
sumxy = 0
sumx = sum(x)
sumy = sum(y)
sumx2 = 0
sumy2 = 0
sumxx2 = 0
for(i in 1:n){
sumxy = sumxy + x[i]*y[i]
sumx2 = sumx2 + x[i]*x[i]
sumy2 = sumy2 + y[i]*y[i]
sumxx2 = sumxx2 + (x[i] - mean(x))^2
}
b1 = (n*sumxy - (sumx)*(sumy))/(n*sumx2 - (sumx^2))
b0 = mean(y) - b1*mean(x)
# (b) Conduct t-test at alpha = 0.05 for slope being equal to 0
# H0: b1 = 0
# Ha: b1 != 0
b1prime = 0
s2 = (1/(n-2))*(sumy2 - b0*sumy - b1*sumxy)
s = sqrt(s2)
t = (b1 - b1prime)/(s/sqrt(sumxx2))
# t_(alpha/2,8) = +/- 2.3060
t_alpha = 2.3060
# since t > t_(alpha/2,8), we can reject the null hypothesis that the slope was 0
# (c) develop a 95% confidence interval for the intercept
width = t_alpha*((s * sqrt(sumx2))/(sqrt(n)*sqrt(sumxx2)))
lb = b0 - width
ub = b0 + width
# (d) develop a confidence interval for the regression line when x = 5
x_val = 5
y_hat = b0 + b1*x_val
width_rl = t_alpha * s * sqrt((1/n) + (x_val - mean(x))/sumxx2)
lb_rl = y_hat - width_rl
ub_rl = y_hat + width_rl
# (e)
width_newval = t_alpha * s * sqrt(1 + (1/n) + (x_val - mean(x))/sumxx2)
lb_newval = y_hat - width_newval
ub_newval = y_hat + width_newval
10/159
10/150
290000*.70
16000*12
for(i in range 1:50){}
for(i in 1:50){}
sum = 0
p = 0.5/100
for(i in 1:50){
sum = sum + choose(50,i)*((p)^i)*((1-p)^(50-i))
}
sum = 0
p = 0.5/100
years = 100
for(i in 1:years){
sum = sum + choose(50,i)*((p)^i)*((1-p)^(years-i))
}
sum = 0
p = 0.5/100
years = 100
for(i in 1:years){
sum = sum + choose(years,i)*((p)^i)*((1-p)^(years-i))
}
sum = 0
p = 0.5/100
years = 400
for(i in 1:years){
sum = sum + choose(years,i)*((p)^i)*((1-p)^(years-i))
}
sum = 0
p = 0.5/100
years = 20
for(i in 1:years){
sum = sum + choose(years,i)*((p)^i)*((1-p)^(years-i))
}
sum = 0
p = 0.5/100
years = 20
vals = c()
for(i in 1:years){
vals[i] = choose(years,i)*((p)^i)*((1-p)^(years-i))
sum = sum + choose(years,i)*((p)^i)*((1-p)^(years-i))
}
sum = 0
p = 0.5/100
years = 20
vals = c()
for(i in 1:years){
vals[i] = choose(years,i)*((p)^i)*((1-p)^(years-i))
sum = sum + choose(years,i)*((p)^i)*((1-p)^(years-i))
}
plot(1:years, vals)
1:years
sum = 0
p = 0.5/100
years = 20
vals = c()
year_arr = 1:years
for(i in 1:years){
vals[i] = choose(years,i)*((p)^i)*((1-p)^(years-i))
sum = sum + choose(years,i)*((p)^i)*((1-p)^(years-i))
}
plot(year_arr, vals)
